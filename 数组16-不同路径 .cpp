/*不同路径 
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？


例如，上图是一个7 x 3 的网格。有多少可能的路径？

示例1:
输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右
*/

int uniquePaths(int m, int n){
    int **a=(int **)malloc(sizeof(int*)*m);                    //动态申请二维数组，利用二级指针实现！
    for(int i=0;i<m;i++){                                      //用数组表示坐标，相应坐标对应的数值表示能到达此点的路径数 
        a[i]=(int *)malloc(sizeof(int)*n);
        for(int j=0;j<n;j++){
            if(i==0 || j==0)
                a[i][j]=1;                                     //第一行和第一列的点所对应的路径数只能是1  
            else
                a[i][j]=a[i-1][j]+a[i][j-1];                   //每一点的值为左边和上边的数值和 
        }
    }
    return a[m-1][n-1];
}

/*二级指针动态申请二维数组：
    5行2列的数组： 
	int **p = (int **)malloc(sizeof(int *) * 5);
	for (int i = 0; i < 5; ++i)
	{
		p[i] = (int *)malloc(sizeof(int) * 2);
	}
*/ 

