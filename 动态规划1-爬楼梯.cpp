/*爬楼梯
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
注意：给定 n 是一个正整数。

示例:
输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶
*/

/*思路： 
3阶（3种）：1+1+1；1+2；2+1 
4阶（5种）：1+1+1+1；1+1+2；1+2+1；2+1+1；2+2 

多数几组会发现规律： 
1阶楼梯：1种方法
2阶楼梯：2种方法
3阶楼梯：3种方法
4阶楼梯：5种方法
5阶楼梯：8种方法
6阶楼梯：13种方法

即：斐波那契数列！！！
*/ 

int climbStairs(int n){
    if (n<2) 
		return n;
    int a=1,b=1;
    int c;
    for (int i=2;i<=n;i++){
        c=a+b;
        a=b;
        b=c;
    }
    return c;
}

/*
若用寻常递归，会因为大量重复计算导致运行超时！ 
int climbStairs(int n) {
	if (n==1) 
		return 1;
	if (n==2) 
		return 2;
	return climbStairs(n-1) + climbStairs(n-2);
}
*/ 



